dir.create("results/sensitivity_analysis")
dir.create("data")
readData <- function(url) {
## Reads CSV data from input URL string
filename <- tail(unlist(strsplit(url, "/")), 1)
filepath <- paste("data", "/", filename, sep="")
if (!file.exists(filepath)) {
download.file(url, filename, method="curl")
}
data <- read.csv(filepath, stringsAsFactors=FALSE)
return(data)
}
assignAgeGroup <- function(ageVar) {
## logic for childhood, teenage, young adult, adult, and later-life age groups
if (ageVar %in% c("Under 5 years", "5-14 years")) {
return("00-14")
} else if (ageVar %in% c("15-19 years", "20-24 years")) {
return("15-24")
} else if (ageVar %in% c("25-29 years", "30-34 years", "35-39 years", "40-44 years")) {
return("25-44")
} else if (ageVar %in% c("45-49 years", "50-54 years", "55-59 years", "60-64 years")) {
return("45-64")
} else if (ageVar %in% c("65-69 years", "70+ years")) {
return("65+")
} else {
return("")
}
}
addAgeGroup <- function(data, ageVar="age_name") {
## replaces age grouping in current data.frame to childhood, teenage, YA, adult, later-life
## Args:
##      data: data.frame object
##      ageVar: string denoting the column of ages to be replaced
## Returns:
##      data: data.frame object with new age groupings
ageGroup <- vector(length=nrow(data))
for (i in 1:nrow(data)) {
ageGroup[i] <- assignAgeGroup(as.vector(data[i, ageVar]))
}
data$ageGroup <- ageGroup
return(data)
}
preprocessGBD <- function(data) {
## extracts YLD and YLL rates from 2010 Global Burden of Disase data
## Args:
##      data: GBD dataset downloaded from the web
## Returns:
##      data: a pre-processed 2010 GBD dataset
data %<>%
## filter out unnecessary variables
select(-c(pc_mean, pc_upper, pc_lower)) %>%
filter(year == 2010) %>%
filter(sex %in% c("Females", "Males")) %>%
## extract only YLD and YLL rates
filter(measure %in% c("yll", "yld")) %>%
## create long-form dataset
melt(measure.vars=c("nm_mean", "nm_upper", "nm_lower", "rt_mean", "rt_upper", "rt_lower")) %>%
## create wide-form dataset with national YLD/YLL rates
dcast(cause_name + age_name + sex ~ measure + variable, value.var="value") %>%
## age group manipulations
addAgeGroup("age_name") %>%
filter(ageGroup != "") %>%
select(-age_name) %>%
## averaging YLD/YLL rates with respect to new age groupings
group_by(cause_name, sex, ageGroup) %>%
summarise_each(funs(mean))
return(data)
}
getDiseaseIndex <- function(diseaseName, data) {
## searches disease index and returns indices of the first match
## Args:
##      diseaseName: string vector denoting diseases of interest
##      data: data.frame to be searched
## Returns:
##      indices of the first string match
index <- grep(diseaseName, data$cause_name)
pattern <- unique(data$cause_name[index])[1]
return(which(data$cause_name == pattern))
}
subsetDataByDisease <- function(diseaseName, data) {
## subsets data frame from first string match
index <- getDiseaseIndex(diseaseName, data)
return(data[index, ])
}
calculateMichaudYLD <- function(checkRatio, yldyllRatio, nationalYLD, nycPop, nycYLL) {
## calculates YLDs based on the 2006 Michaud study
## Args:
##      checkRatio: numeric. National YLD:YLL ratio to check if > 10 or < 10
##      yldyllRatio: numeric. National YLD:YLL ratio to evaluate
##      nationalYLD: numeric. National YLD rate
##      nycPop: numeric. NYC Population
##      nycYLL: numeric. NYC YLL
## Returns:
##      nycYLD: New York City YLD estimate
nycYLDLogic <- (checkRatio >= 5 | is.na(checkRatio) | is.infinite(checkRatio) | is.na(nycYLL))
nycYLD <- ifelse(nycYLDLogic, nationalYLD * (nycPop / 100000), yldyllRatio * nycYLL)
return(nycYLD)
}
calculatePrevalenceYLD <- function(nycPrevalence) {
## calculates prevalence-based YLD estimates from 2010 GBD Study
## Args:
##      nycPrevalence: data.frame. NYC prevalence data with associated disability weights
## Returns:
##      nycYLD: data.frame. NYC YLD estimates.
nycYLD <- nycPrevalence %>%
mutate(yld = prevalence * dependence_rate * dw_estimate,
yld_upper = prevalence * dependence_rate * dw_upper,
yld_lower = prevalence * dependence_rate * dw_lower)
return(nycYLD)
}
calculateYLL <- function(mortalityData) {
## calculates YLLs from mortality data
nycYLL <- mortalityData %>%
mutate(le = sle - mean_age,
yll = mortality * (1 - exp((-0.03 * le))) / 0.03)
return(nycYLL)
}
calculatePrevalenceDALY <- function(diseaseName, nycYLL, nycYLD) {
## calculates DALYs using prevalence-based YLDs from the 2010 GBD study
## Args:
##      diseaseName: chr. The disease of interest.
##      nycYLL: data.frame. New York City YLL estimates
##      nycYLD: data.frame. New York City YLD estimates
## Returns:
##      dalys: data.frame. New York City DALY estimates
diseaseYLL <- subsetDataByDisease(diseaseName, nycYLL)
nycYLD <- subsetDataByDisease(diseaseName, nycYLD)
dalys <- diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE)) %>%
join(nycYLD, c("cause_name", "sex"), type = "right") %>%
ungroup() %>%
mutate(daly = ifelse(is.na(yll), 0 + yld, yll + yld),
daly_upper = ifelse(is.na(yll), 0 + yld_upper, yll + yld_upper),
daly_lower = ifelse(is.na(yll), 0 + yld_lower, yll + yld_lower))
return(dalys)
}
calculateDALY <- function(diseaseName, population, nycYLL, nycYLD=NULL, nationalRates=NULL) {
## workhorse function to calculate DALY scores for specified disease using either
## prevalence-based YLD estimates or the Michaud approach using national YLD/YLL rates
diseaseYLL <- subsetDataByDisease(diseaseName, nycYLL)
if (!is.null(nycYLD) & !is.null(nationalRates)) {
stop("You cannot provide values to both nycYLD and nationalRates parameters.")
} else if (!is.null(nycYLD)) {
nycYLD <- subsetDataByDisease(diseaseName, nycYLD)
dalys <- calculatePrevalenceDALY(diseaseName, nycYLL, nycYLD)
return(dalys)
} else if (!is.null(nationalRates)) {
## subset datasets for specified disease
diseaseRates <- subsetDataByDisease(diseaseName, nationalRates)
## if disease not found in gbdData, return YLL data as DALYs
if (nrow(diseaseRates) == 0) {
dalys <- diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll),
daly = sum(yll))
return(dalys)
}
## compute national YLD:YLL ratio and join to NYC YLL and population data by age, sex
dalys <- diseaseRates %>%
## compute national YLD:YLL ratio
mutate(yldyll_ratio_mean = yld_nm_mean / yll_nm_mean,
yldyll_ratio_upper = yld_nm_upper / yll_nm_mean,
yldyll_ratio_lower = yld_nm_lower / yll_nm_mean) %>%
# join tables
join(population, by=c("ageGroup", "sex")) %>%
join(diseaseYLL, by=c("cause_name", "ageGroup", "sex")) %>%
## estimate YLDs using Michaud logic
mutate(yld = calculateMichaudYLD(yldyll_ratio_mean, yldyll_ratio_mean, yld_rt_mean, population, yll),
yld_upper = calculateMichaudYLD(yldyll_ratio_mean, yldyll_ratio_upper, yld_rt_upper, population, yll),
yld_lower = calculateMichaudYLD(yldyll_ratio_mean, yldyll_ratio_lower, yld_rt_lower, population, yll)) %>%
## collapse age groups
group_by(cause_name, sex) %>%
summarise_each(funs(sum(., na.rm=TRUE)), -c(cause_name, sex, ageGroup)) %>%
## calculate DALY estimates with lower and upper bounds
mutate(daly = yll + yld,
daly_upper = yll + yld_upper,
daly_lower = yll + yld_lower) %>%
select(cause_name, sex, yll, yld, yld_upper, yld_lower, daly, daly_upper, daly_lower)
return(dalys)
}
}
segmentDALY <- function(dalyObj, strata) {
## helper function to subset DALY data
if (strata == "total") {
dalyObj %>% group_by(cause_name) %>% summarise_each(funs(sum), -c(sex)) %>% arrange(desc(daly)) %>% as.data.frame()
} else if (strata == "male") {
dalyObj %>% filter(sex == "Male") %>% arrange(desc(daly))
} else if (strata == "female") {
dalyObj %>% filter(sex == "Female") %>% arrange(desc(daly))
}
}
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
plotDALY <- function(data, title, stackedBar=FALSE) {
## plot function for DALY object
if (stackedBar) {
meltedData <- melt(data, id.vars="cause_name", measure.vars=c("yll", "yld"), value.name="daly")
ggplot(meltedData, aes(x=reorder(cause_name, daly, FUN=sum, na.rm=TRUE), y=daly, fill=variable)) +
geom_bar(stat="identity") +
ggtitle(title) +
ylab("Disability-Adjusted Life Years (DALYs)") + xlab("Causes") +
scale_y_continuous(breaks=seq(0, max(data$daly_upper, na.rm=TRUE), by=100000), labels=comma) +
scale_fill_brewer() +
coord_flip() +
theme_bw()
} else {
limits <- aes(ymin=daly_lower, ymax=daly_upper)
ggplot(data, aes(x=reorder(cause_name, daly), y=daly)) +
geom_pointrange(limits) +
ggtitle(title) +
ylab("Disability-Adjusted Life Years (DALYs)") + xlab("Causes") +
scale_y_continuous(breaks=seq(0, max(data$daly_upper, na.rm=TRUE), by=100000), labels=comma) +
coord_flip() +
theme_bw()
}
}
url <- "http://ghdx.healthdata.org/sites/default/files/record-attached-files/IHME_USA_GBD_2010_RESULTS_1990_2010_BY_CAUSE_Y2013M08D29.CSV"
cause <- readData(url) %>%
preprocessGBD()
url <- "http://ghdx.healthdata.org/sites/default/files/record-attached-files/IHME_USA_GBD_2010_RESULTS_1990_2010_BY_RISK_UPDATED_Y2013M11D21.CSV"
risk <- readData(url) %>%
rename(cause_name = risk_name) %>%
preprocessGBD()
mortality <- read.csv("data/2013_nyc_mortality.csv", stringsAsFactors=FALSE)
population <- read.csv("data/2013_nyc_population.csv", stringsAsFactors=FALSE)
prevalence <- read.csv("data/2013_nyc_prevalence.csv", stringsAsFactors=FALSE)
nationalRates <- rbind(cause, risk) %>%
ungroup() %>%
mutate(sex = ifelse(sex == "Females", "Female", "Male")) %>%
mutate(cause_name = ifelse(cause_name == "Road injury", "Motor vehicle accidents", cause_name),
cause_name = ifelse(cause_name == "Trachea, bronchus, and lung cancers", "Lung cancer", cause_name)) %>%
arrange(cause_name)
write.csv(nationalRates, "results/national_yldyll_rates.csv")
nycYLL <- calculateYLL(mortality)
write.csv(nycYLL, "results/nyc_yll_by_age_sex_race.csv")
nycYLL %<>%
group_by(cause_name, sex, ageGroup) %>%
summarize(yll = sum(yll))
write.csv(nycYLL, "results/nyc_yll_by_age_sex.csv")
nycYLD <- calculatePrevalenceYLD(prevalence)
write.csv(nycYLD, "results/nyc_yld_by_age_sex.csv")
nycYLD %<>%
group_by(cause_name, sex) %>%
summarize(yld = sum(yld, na.rm=TRUE),
yld_upper = sum(yld_upper, na.rm=TRUE),
yld_lower = sum(yld_lower, na.rm=TRUE))
write.csv(nycYLD, "results/nyc_yld_by_sex.csv")
## create a search index
disease <- unique(c(nycYLL$cause_name, nycYLD$cause_name))
drug <- "Cannabis"
mental <- c("Major depressive disorder", "Anxiety", "Bipolar")
index <- unique(c(disease, drug, mental))
View(nycYLL)
index
michaudDALY <- lapply(index, calculateDALY, population, nycYLL=nycYLL, nationalRates=nationalRates)
michaudDALY <- do.call(rbind.fill, michaudDALY)
write.csv(michaudDALY, "results/nyc_daly_michaud.csv")
prevalenceDALY <- lapply(index, calculateDALY, population, nycYLL=nycYLL, nycYLD=nycYLD)
prevalenceDALY <- do.call(rbind.fill, prevalenceDALY)
write.csv(prevalenceDALY, "results/nyc_daly_prevalence.csv")
View(prevalenceDALY)
View(michaudDALY)
prevalenceDALY <- lapply(index, calculateDALY, population, nycYLL=nycYLL, nycYLD=nycYLD)
prevalenceDALY <- do.call(rbind.fill, prevalenceDALY)
write.csv(prevalenceDALY, "results/nyc_daly_prevalence.csv")
View(prevalenceDALY)
prevalenceMale <- segmentDALY(prevalenceDALY, strata="male")
michaudMale <- segmentDALY(michaudDALY, strata="male")
View(prevalenceMale)
View(michaudDALY)
View(michaudMale)
knitr::kable(michaudMale, digits=0)
source('~/.active-rstudio-document', echo=TRUE)
View(nycYLL)
View(prevalenceDALY)
calculatePrevalenceDALY <- function(diseaseName, nycYLL, nycYLD) {
## calculates DALYs using prevalence-based YLDs from the 2010 GBD study
## Args:
##      diseaseName: chr. The disease of interest.
##      nycYLL: data.frame. New York City YLL estimates
##      nycYLD: data.frame. New York City YLD estimates
## Returns:
##      dalys: data.frame. New York City DALY estimates
diseaseYLL <- subsetDataByDisease(diseaseName, nycYLL)
nycYLD <- subsetDataByDisease(diseaseName, nycYLD)
dalys <- diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE)) %>%
join(nycYLD, c("cause_name", "sex"), type = "left") %>%
ungroup() %>%
mutate(daly = ifelse(is.na(yll), 0 + yld, yll + yld),
daly_upper = ifelse(is.na(yll), 0 + yld_upper, yll + yld_upper),
daly_lower = ifelse(is.na(yll), 0 + yld_lower, yll + yld_lower))
return(dalys)
}
prevalenceDALY <- lapply(index, calculatePrevalenceDALY, population, nycYLL=nycYLL, nycYLD=nycYLD)
diseaseName <- "breast cancer"
diseaseYLL <- subsetDataByDisease(diseaseName, nycYLL)
diseaseYLL
subsetDataByDisease("Breast cancer", nycYLL)
diseaseYLL
diseaseYLL <- subsetDataByDisease("Breast cancer", nycYLL)
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE))
diseaseYLL
diseaseYLL
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE))
nycYLL
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll))
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE))
diseaseYLL
?join
source('~/.active-rstudio-document', echo=TRUE)
View(prevalenceTotal)
View(michaudMale)
View(mortality)
View(nycYLL)
View(mortality)
View(michaudTotal)
View(michaudDALY)
View(nycYLL)
nycYLL %>% group_by(cause_name, sex) %>% summarise(yll = sum(yll))
source('~/.active-rstudio-document', echo=TRUE)
View(prevalenceDALY)
View(michaudTotal)
View(michaudMale)
View(michaudDALY)
View(michaudDALY)
View(michaudMale)
View(nycYLD)
source('~/.active-rstudio-document', echo=TRUE)
View(prevalenceMale)
View(prevalenceDALY)
?join
View(nycYLD)
View(nycYLD)
diseaseYLL <- subsetDataByDisease("Breast cancer", nycYLD)
diseaseYLL
nycYLDBreast <- subsetDataByDisease("Breast cancer", nycYLD)
diseaseYLL <- subsetDataByDisease("Breast cancer", nycYLL)
diseaseYLL
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE)) %>%
join(nycYLD, c("cause_name", "sex"), type = "left")
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE)) %>%
join(nycYLD, c("cause_name", "sex"), type = "left") %>%
ungroup() %>%
filter(yld != 0) %>%
mutate(daly = ifelse(
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE)) %>%
join(nycYLD, c("cause_name", "sex"), type = "left") %>%
ungroup() %>%
filter(yld != 0)
View(diseaseYLL)
diseaseYLL <- subsetDataByDisease("Colon and rectum cancers", nycYLL)
diseaseYLL
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE))
source('~/.active-rstudio-document', echo=TRUE)
diseaseYLL <- subsetDataByDisease("Colon and rectum cancers", nycYLL)
diseaseYLL
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE))
7361 + 7020
nycYLDColon <- subsetDataByDisease("Colon and rectum cancers", nycYLD)
nycYLDColon
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE))
View(michaudDALY)
View(nycYLD)
View(prevalenceDALY)
diseaseYLL %>%
group_by(cause_name, sex) %>%
summarize(yll = sum(yll, na.rm=TRUE))
View(michaudDALY)
View(nycYLD)
View(nycYLL)
subsetDataByDisease("Colon and rectum cancers", nycYLL)
subsetDataByDisease("Colon and rectum cancers", nycYLL) %>% group_by(cause_name, sex) %>% summarize(yll = sum(yll))
13383 -14377
14383 -14377
View(prevalenceDALY)
library(stringr)
renameDiseaseLabel <- function(disease) {
if (str_detect(disease, " use disorders") & str_detect(disease, "Alcohol")) {
return(str_replace(disease, " use disorders", ""))
} else if (disease == "Osteoarthritis") {
return("Arthritis")
} else if (disease == "Other musculoskeletal disorders") {
return("Other arthritis")
}
}
test <- c("asld;kfja;slfd", "Alcohol use disorders", "Cocaine use disorders", "Osteoarthritis", "Other musculoskeletal disorders")
```
test
renameDiseaseLabel <- function(disease) {
if (str_detect(disease, " use disorders") & str_detect(disease, "Alcohol")) {
return(str_replace(disease, " use disorders", ""))
} else if (disease == "Osteoarthritis") {
return("Arthritis")
} else if (disease == "Other musculoskeletal disorders") {
return("Other arthritis")
} else {
return(disease)
}
}
sapply(test, renameDiseaseLabel)
renameDiseaseLabel <- function(disease) {
if (str_detect(disease, " use disorders") & !str_detect(disease, "Alcohol")) {
return(str_replace(disease, " use disorders", ""))
} else if (disease == "Osteoarthritis") {
return("Arthritis")
} else if (disease == "Other musculoskeletal disorders") {
return("Other arthritis")
} else {
return(disease)
}
}
test <- c("asld;kfja;slfd", "Alcohol use disorders", "Cocaine use disorders", "Osteoarthritis", "Other musculoskeletal disorders")
sapply(test, renameDiseaseLabel)
renameDiseaseLabel <- function(disease) {
if (str_detect(disease, " use disorders") & !str_detect(disease, "Alcohol")) {
return(str_replace(disease, "use disorders", "use"))
} else if (disease == "Osteoarthritis") {
return("Arthritis")
} else if (disease == "Other musculoskeletal disorders") {
return("Other arthritis")
} else {
return(disease)
}
}
test <- c("asld;kfja;slfd", "Alcohol use disorders", "Cocaine use disorders", "Osteoarthritis", "Other musculoskeletal disorders")
sapply(test, renameDiseaseLabel)
sapply(prevalenceDALY$cause_name, renameDiseaseLabel)
sapply(prevalenceDALY$cause_name, renameDiseaseLabel, USE.NAMES=FALSE)
View(prevalence)
View(prevalenceDALY)
??kable
source('~/GitHub/health/roadmap-daly/main.R', echo=TRUE)
View(prevalenceDALY)
dir.create("data")
source('~/GitHub/health/roadmap-daly/main.R', echo=TRUE)
source('~/GitHub/health/roadmap-daly/main.R', echo=TRUE)
source('~/GitHub/health/roadmap-daly/main.R', echo=TRUE)
getwd()
prevalenceDALY <- read.csv("results/nyc_daly_prevalence.csv", stringsAsFactors=FALSE)
prevalenceDALY
source('~/GitHub/health/roadmap-daly/main.R', echo=TRUE)
source('~/GitHub/health/roadmap-daly/main.R', echo=TRUE)
michaudDALYSensitivity
source('~/GitHub/health/roadmap-daly/main.R', echo=TRUE)
michaudDALYSensitivity
source('~/GitHub/health/roadmap-daly/main.R', echo=TRUE)
michaudDALYSensitivity
write.csv(michaudDALYSensitivity, "results/sensitivity_analysis/nyc_daly_michaud.csv", row.names=FALSE)
michaudDALY <- read.csv("results/sensitivity_analysis/nyc_daly_michaud.csv", stringsAsFactors=FALSE)
michaudDALY
michaudTotal <- segmentDALY(michaudDALY, strata="total")
knitr::kable(michaudTotal, digits=0)
source('~/GitHub/health/roadmap-daly/main.R', echo=TRUE)
